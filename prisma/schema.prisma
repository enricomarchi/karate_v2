generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model FasciaEta {
  id_fascia        Int               @id @default(autoincrement())
  descrizione      String            @db.VarChar(50)
  anno_nascita_min Int
  anno_nascita_max Int
  categorie        CategoriaFascia[]

  @@map("fasce_eta")
}

model Cintura {
  id_cintura Int                @id @default(autoincrement())
  colore     String             @db.VarChar(20)
  kyu        Decimal?           @db.Decimal(3, 1)
  atleti     Atleta[]
  categorie  CategoriaCintura[]

  @@map("cinture")
}

model Disciplina {
  id_disciplina        String                 @id @db.VarChar(20)
  valore               String                 @db.VarChar(100)
  categorie            Categoria[]
  configurazioni_prove configurazioni_prove[]
  iscrizioni           Iscrizione[]
  prove                prove[]

  @@map("discipline")
}

model Categoria {
  id_categoria        Int                   @id @default(autoincrement())
  nome                String                @db.VarChar(255)
  id_disciplina       String                @db.VarChar(20)
  sesso               categorie_sesso
  peso_min            Decimal?              @db.Decimal(5, 2)
  peso_max            Decimal?              @db.Decimal(5, 2)
  n_ordine            Int?
  disciplina          Disciplina            @relation(fields: [id_disciplina], references: [id_disciplina], onDelete: Cascade, map: "categorie_ibfk_1")
  cinture             CategoriaCintura[]
  fasce               CategoriaFascia[]
  iscrizioni          Iscrizione[]
  tabelloni_categorie tabelloni_categorie[]

  @@index([id_disciplina], map: "id_disciplina")
  @@map("categorie")
}

model CategoriaFascia {
  id_categoria Int
  id_fascia    Int
  categoria    Categoria @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, map: "categorie_fasce_ibfk_1")
  fascia       FasciaEta @relation(fields: [id_fascia], references: [id_fascia], onDelete: Cascade, map: "categorie_fasce_ibfk_2")

  @@id([id_categoria, id_fascia])
  @@index([id_fascia], map: "id_fascia")
  @@map("categorie_fasce")
}

model CategoriaCintura {
  id_categoria Int
  id_cintura   Int
  categoria    Categoria @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, map: "categorie_cinture_ibfk_1")
  cintura      Cintura   @relation(fields: [id_cintura], references: [id_cintura], onDelete: Cascade, map: "categorie_cinture_ibfk_2")

  @@id([id_categoria, id_cintura])
  @@index([id_cintura], map: "id_cintura")
  @@map("categorie_cinture")
}

model Societa {
  id_societa       Int      @id @default(autoincrement())
  nome_societa     String   @db.VarChar(100)
  pagato           Decimal? @default(0.00) @db.Decimal(10, 2)
  resto_consegnato Decimal? @default(0.00) @db.Decimal(10, 2)
  atleti           Atleta[]

  @@map("societa")
}

model Atleta {
  id_atleta                                              Int              @id @default(autoincrement())
  cognome                                                String           @db.VarChar(50)
  nome                                                   String           @db.VarChar(50)
  sesso                                                  atleti_sesso
  anno_nascita                                           Int
  cintura_id                                             Int?
  dan                                                    Int?
  peso_kg                                                Int?
  id_societa                                             Int
  societa                                                Societa          @relation(fields: [id_societa], references: [id_societa], onDelete: Cascade, map: "atleti_ibfk_1")
  cintura                                                Cintura?         @relation(fields: [cintura_id], references: [id_cintura], map: "atleti_ibfk_2")
  incontri_prova_incontri_prova_id_atleta_rossoToatleti  incontri_prova[] @relation("incontri_prova_id_atleta_rossoToatleti")
  incontri_prova_incontri_prova_id_atleta_biancoToatleti incontri_prova[] @relation("incontri_prova_id_atleta_biancoToatleti")
  iscrizioni                                             Iscrizione[]

  @@index([cintura_id], map: "cintura_id")
  @@index([id_societa], map: "id_societa")
  @@map("atleti")
}

model Iscrizione {
  id_iscrizione     Int        @id @default(autoincrement())
  id_atleta         Int
  id_disciplina     String     @db.VarChar(20)
  id_categoria      Int?
  id_tabellone      Int?
  data_iscrizione   DateTime?  @default(now()) @db.Timestamp(0)
  manuale           Boolean?   @default(false)
  confermata        Boolean?   @default(false)
  ammesso_in_finale Boolean?   @default(false)
  classifica        Int?
  atleta            Atleta     @relation(fields: [id_atleta], references: [id_atleta], onDelete: Cascade, map: "iscrizioni_ibfk_1")
  categoria         Categoria? @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, map: "iscrizioni_ibfk_2")
  disciplina        Disciplina @relation(fields: [id_disciplina], references: [id_disciplina], onDelete: Cascade, map: "iscrizioni_ibfk_3")
  tabelloni         tabelloni? @relation(fields: [id_tabellone], references: [id_tabellone], map: "iscrizioni_ibfk_4")

  @@index([id_atleta], map: "id_atleta")
  @@index([id_categoria], map: "id_categoria")
  @@index([id_disciplina], map: "id_disciplina")
  @@index([id_tabellone], map: "id_tabellone")
  @@map("iscrizioni")
}

model configurazioni_prove {
  id                       Int                               @id @default(autoincrement())
  config_id                Int
  disciplina               String                            @db.VarChar(20)
  ordine                   Int
  valutazione              configurazioni_prove_valutazione? @default(PUNTEGGIO)
  template_tabellone       String?                           @default("KUMITE_BASE") @db.VarChar(50)
  numero_arbitri           Int?                              @default(3)
  finale                   Boolean?                          @default(false)
  calcola_totali           Boolean?                          @default(false)
  durata_incontro          DateTime?                         @default(dbgenerated("'00:00:20'")) @db.Time(0)
  configurazioni_tabelloni configurazioni_tabelloni          @relation(fields: [config_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "configurazioni_prove_ibfk_1")
  discipline               Disciplina                        @relation(fields: [disciplina], references: [id_disciplina], onDelete: NoAction, onUpdate: NoAction, map: "configurazioni_prove_ibfk_2")
  template_tabelloni       template_tabelloni?               @relation(fields: [template_tabellone], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "configurazioni_prove_ibfk_3")

  @@index([config_id], map: "config_id")
  @@index([disciplina], map: "disciplina")
  @@index([template_tabellone], map: "template_tabellone")
}

model configurazioni_tabelloni {
  id                   Int                    @id @default(autoincrement())
  nome                 String                 @db.VarChar(100)
  data_creazione       DateTime?              @default(now()) @db.Timestamp(0)
  configurazioni_prove configurazioni_prove[]
  tabelloni            tabelloni[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model impostazioni_gara {
  id               Int      @id @default(1)
  nome_gara        String   @db.VarChar(100)
  data_gara        DateTime @db.Date
  luogo            String?  @db.VarChar(100)
  quota_iscrizione Decimal  @default(0.00) @db.Decimal(10, 2)
}

model incontri_prova {
  id_incontro                                    Int             @id @default(autoincrement())
  id_prova                                       Int
  id_atleta_rosso                                Int?
  id_atleta_bianco                               Int?
  ordine                                         Int
  turno                                          String          @db.VarChar(20)
  prove                                          prove           @relation(fields: [id_prova], references: [id_prova], onDelete: Cascade, map: "incontri_prova_ibfk_1")
  atleti_incontri_prova_id_atleta_rossoToatleti  Atleta?         @relation("incontri_prova_id_atleta_rossoToatleti", fields: [id_atleta_rosso], references: [id_atleta], map: "incontri_prova_ibfk_2")
  atleti_incontri_prova_id_atleta_biancoToatleti Atleta?         @relation("incontri_prova_id_atleta_biancoToatleti", fields: [id_atleta_bianco], references: [id_atleta], map: "incontri_prova_ibfk_3")
  voti_incontro                                  voti_incontro[]

  @@index([id_atleta_bianco], map: "id_atleta_bianco")
  @@index([id_atleta_rosso], map: "id_atleta_rosso")
  @@index([id_prova], map: "id_prova")
}

model kata_shotokan {
  id_kata Int                   @id @default(autoincrement())
  codice  String                @unique(map: "codice") @db.VarChar(10)
  nome    String                @db.VarChar(50)
  livello kata_shotokan_livello
}

model prove {
  id_prova             Int                 @id @default(autoincrement())
  id_tabellone         Int
  id_disciplina        String              @db.VarChar(20)
  numero_prova         Int
  stato                prove_stato?        @default(DA_INIZIARE)
  valutazione          prove_valutazione?  @default(PUNTEGGIO)
  template_tabellone   String?             @default("KUMITE_BASE") @db.VarChar(50)
  numero_arbitri       Int?                @default(3)
  tatami               Int?
  ora_inizio_prevista  DateTime?           @db.DateTime(0)
  ora_fine_prevista    DateTime?           @db.DateTime(0)
  ora_inizio_effettiva DateTime?           @db.DateTime(0)
  ora_fine_effettiva   DateTime?           @db.DateTime(0)
  finale               Boolean?            @default(false)
  calcola_totali       Boolean?            @default(false)
  durata_incontro      DateTime?           @default(dbgenerated("'00:00:20'")) @db.Time(0)
  incontri_prova       incontri_prova[]
  tabelloni            tabelloni           @relation(fields: [id_tabellone], references: [id_tabellone], onDelete: Cascade, onUpdate: NoAction, map: "prove_ibfk_1")
  discipline           Disciplina          @relation(fields: [id_disciplina], references: [id_disciplina], onDelete: NoAction, onUpdate: NoAction, map: "prove_ibfk_2")
  template_tabelloni   template_tabelloni? @relation(fields: [template_tabellone], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prove_ibfk_3")

  @@index([id_disciplina], map: "id_disciplina")
  @@index([id_tabellone], map: "id_tabellone")
  @@index([template_tabellone], map: "template_tabellone")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model punteggi_societa {
  posizione   Int     @id
  punti       Int
  descrizione String? @db.VarChar(50)
}

model tabelloni {
  id_tabellone             Int                       @id @default(autoincrement())
  codice_tabellone         String                    @unique(map: "codice_tabellone") @db.VarChar(50)
  nome_tabellone           String                    @db.VarChar(100)
  data_creazione           DateTime?                 @default(now()) @db.Timestamp(0)
  stato                    tabelloni_stato?          @default(BOZZA)
  tipo                     tabelloni_tipo?
  pool_numero              Int?
  pool_totali              Int?
  configurazione_id        Int?
  ora_inizio_effettiva     DateTime?                 @db.DateTime(0)
  ora_fine_effettiva       DateTime?                 @db.DateTime(0)
  stampato                 Boolean?                  @default(false)
  iscrizioni               Iscrizione[]
  prove                    prove[]
  configurazioni_tabelloni configurazioni_tabelloni? @relation(fields: [configurazione_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tabelloni_ibfk_1")
  tabelloni_categorie      tabelloni_categorie[]

  @@index([configurazione_id], map: "configurazione_id")
}

model tabelloni_categorie {
  id_tabellone Int
  id_categoria Int
  tabelloni    tabelloni @relation(fields: [id_tabellone], references: [id_tabellone], onDelete: Cascade, onUpdate: NoAction, map: "tabelloni_categorie_ibfk_1")
  categorie    Categoria @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, onUpdate: NoAction, map: "tabelloni_categorie_ibfk_2")

  @@id([id_tabellone, id_categoria])
  @@index([id_categoria], map: "id_categoria")
}

model template_tabelloni {
  id                   String                 @id @db.VarChar(50)
  descrizione          String                 @db.VarChar(255)
  configurazioni_prove configurazioni_prove[]
  prove                prove[]
}

model utenti {
  id_utente          Int          @id @default(autoincrement())
  codice_univoco     String       @unique(map: "codice_univoco") @db.VarChar(36)
  email              String       @unique(map: "email") @db.VarChar(255)
  hash_password      String       @db.VarChar(255)
  ruolo              utenti_ruolo
  data_creazione     DateTime?    @default(now()) @db.Timestamp(0)
  data_aggiornamento DateTime?    @default(now()) @db.Timestamp(0)
}

model voti_incontro {
  id_voto        Int                       @id @default(autoincrement())
  id_incontro    Int
  numero_arbitro Int
  bandierina     voti_incontro_bandierina?
  punteggio      Decimal?                  @db.Decimal(2, 1)
  ora            DateTime?                 @default(now()) @db.Timestamp(0)
  incontri_prova incontri_prova            @relation(fields: [id_incontro], references: [id_incontro], onDelete: Cascade, onUpdate: NoAction, map: "voti_incontro_ibfk_1")

  @@unique([id_incontro, numero_arbitro], map: "unique_voto")
}
